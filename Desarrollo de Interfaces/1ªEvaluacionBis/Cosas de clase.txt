 ----------
|12/09/2024|
 ----------
*FRONTEND*
-React--> Libreria
-Angular-->Framework
-De la base de html, css y Js, tendremos que trabajar con typeScript.
-Tambien le gustaría poder ver astroJs que se dedica a las paginas estaticas.
-Tailwind, framework de css.

*BACKEND*
-Aprender por nuestra cuenta SpringBoot.
-Java.
-PHP.
-nodeJs-->Para programar en backend, se basa en Js, hay que aprender expressJs.
-git.
-Comandos de Linux.
-Todo apoyado a traves del testing(e2e, unitario).
-Deploy.
-Aws.
-Json.
-Database.

-Los datos de entre backend y frotend se pasan en json.

 ----------
|13/09/2024|
 ----------
-Descargamos nodeJs, la version v.20.17.0, (LTS).
-Antes para comprobar si está instalado hay que poner en el cmd node --version.
-Para empezar un proyecto era: Analisis, Diseño, Codificacion, Pruebas, Deploy, Mantenimiento.
-Aplicacion de movil, escritorio o web.
-Mirar Figma.
-Hay que ver los ciclos de vida que estariamos usando para el proyecto(Cascada, iterativo incremental).
-Creamos el primer proyecto en workspaceJS, SALUDATOR.
-Con el code . entramos desde el cmd al visual studio code.
-Descargar live preview.
-Al poner el hover al pasar por el boton cambia de color.
-Usaremos una libreria para usar el confeti en la pagina canvas confeti.
-git init para el controlador de versiones.
-Revisar todo de la pagina sencilla que creamos, sobre todo en el css.

 ----------
|16/09/2024|
 ----------
-PR al repositorio remoto.
-Al instalar node, tambien se descarga npm.
-Para crear una buena pagina web moderna, necesitamos un gestor de paquetes bueno como son(NPM, PMPM, YARM, BUM).
-Constructor de aplicaciones(vite, webpack pero es complicado de configurar).
-npm create vite@latest, para isntalar VITE.
-Normalmente hay que colocarse en la ruta de la carpeta para hacer el npm create vite@latest.
-Libreria vamos a construir la aplicacion(REACT, VUE).
-Lenguaje de programacion a escoger(TypeScript o JavaScript).
-Framework(nextJs, angular).
-En el propio visual usamos en la terminal(npm install, despues npm run dev, despues npm build para crearlo en un servidor
 de verdad).
-Si se cierra el proyecto hay que usar otra vez npm run dev.

 ----------
|17/09/2024|
 ----------
-Empezamos con un poco de repaso del ultimo dia.
-Vamos a usar toneJs como libreria, para el sonido de las teclas del piano.
-Tenemos que instalar la libreria del sintetizador para que suenen las teclas.
-Hay que instalar la dependencia de terceros.
-Como instalar una dependencia en particular.
-Evitar crear aplicaciones inamovibles.
-Colocamos las teclas negras por encima de las blancas con el position absolute.
-Gradients party en google para poner un fondo determinado.
-Buscar en paginas para usar el linear gradient, tanto apra algun fondo como para los textos de h1 por ejemplo.
-Con addEventListener es CLICK siempre.
-Con el input el Onclick al lado del type.

 ----------
|18/09/2024|
 ----------
-En package.json creamos la nueva dependencia de deploy.
	"predeploy": "npm run build",
    	"deploy": "gh-pages -d build",
-Añadimos las dos de arriba y en la consola hacemos el npm install gh-pages.
-Vamos a deployar el proyecto en npm install gh-pages -d build.
Herramientas para hacer testeos(vitest o jest).
-Usaremos jest.
-Hay que crear un fichero nuevo para hacer un testeo.
-Siempre se crea nombre archio.test.lenguaje que usemos.
-Al final descargamos el vitest, que tambien lo tenemos que instalar y para arrancarlo es (npm run test).
-Tenemos que descargar los cd para que suene cada tecla.
-Terminar de colocar los sonidos y subirlo a github, con la version final.

 ----------
|19/09/2024|
 ----------
-Terminamos la web de piano, pero nos falta colocar como ayer los sonidos para que suenen al tocar las teclas.
-Vamos a voler a usar fichaTu.
-Firebase, te da todo el backend hecho.
-Hasta ahora lo que vimos fue del frontend.

-Ahora el backend lo podemos desarollar en cualquier lenguaje.+
-[ (javaScript/typeScript-nodeJs), (Java,Kotlin-SpringBootg), (python-flash), (C#-.Net) ]
-Tambien se incluye la autenticacion, Bases de datos.
-Vamos a crear un pequeño backend con JavaScript, y vamos a ver si nos conectamos al frontend con el json.

-Al entrar en la ruta de la carpeta desde el cmd hacemos un npm init.
-Usando node index.js, nos muestra el console.log, pero la idea es crear en el package.json.
-Si se llama start, usaremos entonces el (npm run start).
-npm install express.
-Importamos el express.
-Tenemos que añadir en el package.json el type:"module".
-Accedemos con localhost3000/.
-No lo podemos desplegar donde nos de la gana.
-Seria esencial aprender (AWS).
-Subimos la prueba a github a un repositorio.
-Vamos a hacer una pagina web desde el repositorio de Angel.
-Entramos en el classroom de Interfaces.
-Tenemos que hacer un fork.
-Siempre que vayamos a trabajar en el proyecto de otro lo tenemos que forkear.
-Crearemos una nueva rama y nos situaremos en ella (git checkout -b xxx(anxo, por ejemplo)).
-Primero hacemo el git a nuestro repo compartido.
-Tras subirlo a nuestro repo, ya nos habilita para hacer la PR.
-Para actualizar los PR que se hayan aceptado hacemos lo siguiente: 

-Listar los repositorios(git remote -v).
-git remote add upstream https://github.com/Anxo55/weblibre.git
-La URL de arriba es con el nombre de angel.

-git pull upstream master.
-Accedemos al Github de angel usando git checkout master.

 ----------
|20/09/2024|
 ----------
-Vamos a empezar a aprender JavaScript.
-Para ejecutar los programas de JavaScript usamos node .\(nombre del archivo).
-Declaracion de variables.
-No usemos nunca var, siempre usemos let.
-Vamos a ver poco let, y vamos a ver mucho const, por que es mas eficiente.
-Ver bien los operadores logicos, sobre todo en los iguales dobles y triples por la diferencia de cada uno.
-Tambien tenemos dos (!=), que tambien se usa el (!==).
-!, operador logico NOT.
-Por ultimo vimos el problema con el ; en algunos programas.
-El proximo dia empezaremos con funciones, objetos.
-JavaScript es asincrono.

 ----------
|23/09/2024|
 ----------
-Hoy nos ensela la plataforma donde podemos hacer ejercicios de practica.
-La pagina es: aprendetu.vercel.app
-Vamos a empezar con los objetos.
-Vemos tambien funciones y lo que pasa al tener parametros y tener otro mensaje al llamar a la funcion.
-Funciones anonimas.

 ----------
|24/09/2024|
 ----------
-Vamos a ver los parametros, por valor y referencia.
-En el parametro le pasamos un(CALLBACK).
-Se usa muchisimo los callback.
-No son lo mismo a la hora de apuntar numeros que objetos.
-FuncionesComoClases.
-Typeof y instanceof.
-Sincronismo y el asincronismo.

 ----------
|25/09/2024|
 ----------
-Nos pusimos a ver bien los asincronismos.
-Vamos a usar random user.
-Usaremos fetch como libreria.
-Con el fetch podemos usar(then, catch, finally).
-Mirar siempre como está estructurada la API, para al usar el json como usarla con el dataJson.
-Vamos con estructuras de control.

 ----------
|26/09/2024|
 ----------
-Nos pusimos a ver los arrays, que son mas faciles que en el propio java.
-El push se usa para añadir nuevos elementos al Array ya creado.
-Usando pop te elimina el ultimo elemento y te lo da.
-Con unshift, se añade un nuevo elemento pero al principio del array.
-Con shift, eliminamos el primer elemento y te lo devuelve.
-Con el concat para unir los dos arrays.
-Viendo el forOf y el forIn, el forIn se tendría que manejar por que sino muestra variables numericas por consola.
-Vemos los Sets, no son los que dabamos de getters y setters.
-Con el has en los Sets, nos dice si esta dicho valor, con true o false.
-Usaremos muchos arrays y pocos Sets.
-Ahora vemos los mapas (clave, valor).
-Entender bien lo de paso por valor y paso por referencia(en este caso de la clase arguments tambien).
-No es lo mismo trabajar con numeros, String y booleanos que con Objetos, verlo muy bien.

 ----------
|30/09/2024|
 ----------
-Hoy ya estamos viendo los Argumentos.
-arguments es un array.
-Operador rest(...numeros).
-Archivo Number.
-Hacemos tambien el archivo date para ver como trabajamos con fechas.
-Descargamos la libreria Day.js, para jugar con fechas en JavaScript.
-La mas famosa es momentJs, pero es muy pesado.
-Proponen cosas como Day.js.
-Libreria Math, igual que java.
-El Math.sqrt era para sacar la raiz cuadrada de cualquier valor. 

 ----------
|01/10/2024|
 ----------
-Intentaremos ver json.
-Creamos el fichero datos.json
-Json sirve para guardar información de forma estructurada.
-Json va muy bien con C#, python, JavaScript.
-Por ejemplo, si creamos una persona y tiene hijos, ponemos el atributo de hijos
  y entre corchetes y llaves los añadimos.
-Creamos el fichero de pokemons para llamar a una api.
-Con el fetch llamamos a la api.
-En el backend nos sale en la consola al inspeccionar.
-Api en vanilla para mostrar las imagenes de los pokemons de frontal.
-Podemos llamar a la api con fetch o coon async.

 ----------
|03/10/2024|
 ----------
-Vamos a ver Desestructuración.
-Vemos en el primer fichero los ejemplos y creamos el segundo para seguir viendolo.
-Practicando en el AprendeTu de Angel, tengo que seguir repasando Referencias y valores que tengo varios fallos.
-Vamos a reforzar lo de Arrow functions.
-En las funciones de flecha siempre la declaramos con el let o const y su nombre y es igual al valor que le pasaremos
 luego se le pasa la flecha que es lo que va dentro de dicha funcion.
-Usando rest, podemos añadir lo de otra constante en una nueva creada despues.

